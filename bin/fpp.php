<?php

/**
 * This file is part of prolic/fpp.
 * (c) 2018-2020 Sascha-Oliver Prolic <saschaprolic@googlemail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Fpp;

use Fpp\Type\Bool_;
use Fpp\Type\Data;
use Fpp\Type\Enum;
use Fpp\Type\Float_;
use Fpp\Type\Guid;
use Fpp\Type\Int_;
use Fpp\Type\Marker;
use Fpp\Type\String_;
use Fpp\Type\Uuid;
use Nette\PhpGenerator\PsrPrinter;
use function Pair;
use Phunkie\Types\ImmList;
use Phunkie\Types\ImmMap;
use Phunkie\Types\Pair;

if (! isset($argv[1])) {
    echo 'Missing input directory or file argument';
    exit(1);
}

$path = $argv[1];

$pwd = \realpath(\getcwd());
$vendorName = 'vendor';

if (\file_exists($composerPath = "$pwd/composer.json")) {
    $composerJson = \json_decode(\file_get_contents($composerPath), true);
    $vendorName = isset($composerJson['config']['vendor-dir']) ? $composerJson['config']['vendor-dir'] : $vendorName;
}

if (! \file_exists("$pwd/$vendorName/autoload.php")) {
    echo "\033[1;31mYou need to set up the project dependencies using the following commands: \033[0m" . PHP_EOL;
    echo 'curl -s http://getcomposer.org/installer | php' . PHP_EOL;
    echo 'php composer.phar install' . PHP_EOL;
    exit(1);
}

$autoloader = require "$pwd/$vendorName/autoload.php";

$prefixesPsr4 = $autoloader->getPrefixesPsr4();
$prefixesPsr0 = $autoloader->getPrefixes();

$locatePsrPath = function (string $classname) use ($prefixesPsr4, $prefixesPsr0): string {
    return locatePsrPath($prefixesPsr4, $prefixesPsr0, $classname);
};

require_once "$pwd/autoload.php";

$config = [
    'use_strict_types' => true,
    'printer' => fn () => (new PsrPrinter())->setTypeResolving(false),
    'file_parser' => parseFile,
    'comment' => 'Generated by prolic/fpp - do not edit !!!',
    'types' => [
        Data\Data::class => Data\definition(),
        Enum\Enum::class => Enum\definition(),
        String_\String_::class => String_\definition(),
        Int_\Int_::class => Int_\definition(),
        Float_\Float_::class => Float_\definition(),
        Bool_\Bool_::class => Bool_\definition(),
        Marker\Marker::class => Marker\definition(),
        Uuid\Uuid::class => Uuid\definition(),
        Guid\Guid::class => Guid\definition(),
    ],
];

if ($path === '--gen-config') {
    $file = <<<CODE
<?php

declare(strict_types=1);

namespace Fpp;

use Nette\PhpGenerator\PsrPrinter;

return [
    'use_strict_types' => true,
    'printer' => fn () => (new PsrPrinter())->setTypeResolving(false),
    'file_parser' => parseFile,
    'comment' => 'Generated by prolic/fpp - do not edit !!!', // put `null` to disable
    'types' => [
        Data\Data::class => Data\definition(),
        Enum\Enum::class => Enum\definition(),
        String_\String_::class => String_\definition(),
        Int_\Int_::class => Int_\definition(),
        Float_\Float_::class => Float_\definition(),
        Bool_\Bool_::class => Bool_\definition(),
        Marker\Marker::class => Marker\definition(),
        Uuid\Uuid::class => Uuid\definition(),
        Guid\Guid::class => Guid\definition(),
    ],
];

CODE;

    \file_put_contents("$pwd/fpp-config.php", $file);

    echo "Default configuration written to $pwd/fpp-config.php\n";
    exit(0);
}

if (\file_exists("$pwd/fpp-config.php")) {
    $config = require "$pwd/fpp-config.php";
}

$config = Configuration::fromArray($config);

$parser = zero();

$config->types()->map(function (Pair $p) use (&$parser) {
    $parser = $parser->or(($p->_2->_1)());

    return $p;
});

$definitions = scan(
    $path
)->map(
    fn ($f) => Pair(($config->fileParser())($parser)->run(\file_get_contents($f)), $f)
)->map(
    function (Pair $p) {
        $parsed = $p->_1;
        $filename = $p->_2;

        $p = $parsed->head();

        if ($p->_2 !== '') {
            echo "\033[1;31mSyntax error at file $filename at:\033[0m" . PHP_EOL . PHP_EOL;
            //\var_dump($p->_1);
            echo \substr($p->_2, 0, 100) . PHP_EOL;
            exit(1);
        }

        return $p->_1;
    }
)->fold(
    ImmList(),
    fn (ImmList $l, ImmList $nds) => $l->combine($nds)
)->fold(
    ImmMap(),
    function (ImmMap $ds, ImmMap $nds) {
        foreach ($nds->iterator() as $n => $d) {
            $ds = $ds->plus($n, $d);
        }

        return $ds;
    }
);

$definitions->map(
    fn (Pair $p) => Pair(dump($p->_2, $definitions, $config), $p->_1)
)->map(
    function (Pair $p) use ($locatePsrPath) {
        $p->_1->map(function (Pair $p) use ($locatePsrPath) {
            $filename = $locatePsrPath($p->_2);
            $directory = \dirname($filename);

            if (! \is_dir($directory)) {
                \mkdir($directory, 0777, true);
            }

            \file_put_contents($filename, $p->_1);

            return $p;
        });

        return $p;
    }
);

echo "Successfully generated and written to disk\n";
exit(0);
